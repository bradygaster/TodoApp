@page "/"
@inject ITodoApiClient _todoApiClient

<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="container">
            <input @bind="newTodoTitle"
                   @ref="newTitleTextBox"
                   autofocus
                   style="margin-right: 10px;"
                   class="form-control"
                   placeholder="Enter a new todo item here and click create to save it" />
            <input type="button" class="btn-secondary btn-sm" @onclick="CreateNewTodo" value="Create" />
        </div>
    </nav>
</header>

<div class="container">
    <main role="main" class="pb-3">
        <div class="list-group mx-0">
            @foreach (var todo in Todos!)
            {
                <label class="list-group-item d-flex gap-2">
                    @if (todo.IsCompleted)
                    {
                        <div class="faded col col-md-1">
                            <button type="button" class="btn btn-success"
                            @onclick="@(e => MarkComplete(todo.Id))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-up-fill" viewBox="0 0 16 16">
                                    <path d="M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a9.84 9.84 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733.058.119.103.242.138.363.077.27.113.567.113.856 0 .289-.036.586-.113.856-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.163 3.163 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.82 4.82 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z" />
                                </svg>
                            </button>
                            <button type="button" class="btn-danger btn"
                            @onclick="@(e => DeleteTodo(todo.Id))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                    <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"></path>
                                </svg>
                            </button>
                        </div>
                        <div class="strike faded col col-md-10">@todo.Title</div>
                    }
                    else
                    {
                        <div class="col col-md-1">
                            <button type="button" class="btn btn-warning"
                            @onclick="@(e => MarkComplete(todo.Id))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-down-fill" viewBox="0 0 16 16">
                                    <path d="M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z" />
                                </svg>
                            </button>
                            <button type="button" class="btn-danger btn"
                            @onclick="@(e => DeleteTodo(todo.Id))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                    <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"></path>
                                </svg>
                            </button>
                        </div>
                        <div class="col col-md-10">@todo.Title</div>
                    }
                </label>
            }
        </div>
    </main>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">

@code
{
    IEnumerable<Todo>? Todos = new List<Todo>();
    string newTodoTitle = string.Empty;
    ElementReference newTitleTextBox;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTodos();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await newTitleTextBox.FocusAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task RefreshTodos()
    {
        Todos = await _todoApiClient.GetTodos();
    }

    protected async Task CreateNewTodo()
    {
        await CreateNewTodo(new Todo { Title = newTodoTitle });
    }

    protected async Task CreateNewTodo(Todo todo)
    {
        await _todoApiClient.CreateTodo(todo);
        await RefreshTodos();
        newTodoTitle = string.Empty;
        await newTitleTextBox.FocusAsync();
    }

    protected async Task MarkComplete(int todoId)
    {
        var todo = await _todoApiClient.GetTodo(todoId);
        todo.IsCompleted = !todo.IsCompleted;
        await _todoApiClient.UpdateTodo(todoId, todo);

        await RefreshTodos();
    }

    protected async Task DeleteTodo(int todoId)
    {
        await _todoApiClient.DeleteTodo(todoId);
        await RefreshTodos();
    }
}